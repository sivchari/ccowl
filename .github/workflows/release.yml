name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            goos: linux
            goarch: amd64
            name: ccowl-linux-amd64
            dockerfile: |
              FROM --platform=linux/amd64 golang:1.24-bullseye
              RUN apt-get update && apt-get install -y \
                  gcc \
                  pkg-config \
                  libgtk-3-dev \
                  libayatana-appindicator3-dev
              ENV CGO_ENABLED=1
          - platform: linux/arm64
            goos: linux
            goarch: arm64
            name: ccowl-linux-arm64
            dockerfile: |
              FROM --platform=linux/arm64 golang:1.24-bullseye
              RUN apt-get update && apt-get install -y \
                  gcc \
                  pkg-config \
                  libgtk-3-dev \
                  libayatana-appindicator3-dev
              ENV CGO_ENABLED=1
          - platform: linux/amd64
            goos: darwin
            goarch: amd64
            name: ccowl-darwin-amd64
            dockerfile: |
              FROM --platform=linux/amd64 golang:1.24-bullseye
              RUN apt-get update && apt-get install -y \
                  clang \
                  libc6-dev \
                  pkg-config
              ENV CGO_ENABLED=1
              ENV GOOS=darwin
              ENV GOARCH=amd64
              ENV CC=clang
              ENV CGO_CFLAGS="-O2 -g"
              ENV CGO_LDFLAGS=""
          - platform: linux/amd64
            goos: darwin
            goarch: arm64
            name: ccowl-darwin-arm64
            dockerfile: |
              FROM --platform=linux/amd64 golang:1.24-bullseye
              RUN apt-get update && apt-get install -y \
                  clang \
                  libc6-dev \
                  pkg-config
              ENV CGO_ENABLED=1
              ENV GOOS=darwin
              ENV GOARCH=arm64
              ENV CC=clang
              ENV CGO_CFLAGS="-O2 -g -target arm64-apple-macos10.12"
              ENV CGO_LDFLAGS="-target arm64-apple-macos10.12"
          - platform: linux/amd64
            goos: windows
            goarch: amd64
            name: ccowl-windows-amd64.exe
            dockerfile: |
              FROM --platform=linux/amd64 golang:1.24-bullseye
              RUN apt-get update && apt-get install -y \
                  gcc-mingw-w64-x86-64 \
                  pkg-config
              ENV CGO_ENABLED=1
              ENV GOOS=windows
              ENV GOARCH=amd64
              ENV CC=x86_64-w64-mingw32-gcc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build binary with Docker
        run: |
          cat > Dockerfile.build <<EOF
          ${{ matrix.dockerfile }}
          RUN useradd -m -u 1000 builder
          USER builder
          WORKDIR /src
          COPY --chown=builder:builder . .
          RUN go build -trimpath -ldflags="-s -w" -o ${{ matrix.name }} .
          EOF
          docker buildx build --platform ${{ matrix.platform }} --output type=local,dest=. -f Dockerfile.build .

      - name: Make binary executable
        run: chmod +x ${{ matrix.name }}

      - name: Compress binary (Linux/macOS)
        if: matrix.goos != 'windows'
        run: |
          tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
          sha256sum ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256

      - name: Compress binary (Windows)
        if: matrix.goos == 'windows'
        run: |
          zip ${{ matrix.name }}.zip ${{ matrix.name }}
          sha256sum ${{ matrix.name }}.zip > ${{ matrix.name }}.zip.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ccowl-linux-amd64/*
            ccowl-linux-arm64/*
            ccowl-darwin-amd64/*
            ccowl-darwin-arm64/*
            ccowl-windows-amd64.exe/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
